# functions

#Get passed argument and check if is set as an environment varibale and unset it.
printEnvAndUnset() {
    local var_name="$1"
    if [ -v $var_name ]; then
        eval "local var_value=\"\${$var_name}\""
        echo "$var_name is set to $var_value, unsetting..."
        unset $var_name
    else
        echo "$var_name is not set"
    fi
}

# Docker clean env variables
dockerEnvClean() {
    printEnvAndUnset DOCKER_TLS_VERIFY
    printEnvAndUnset DOCKER_CERT_PATH
    printEnvAndUnset DOCKER_MACHINE_NAME
    printEnvAndUnset DOCKER_HOST
}

# Check if command exists
#
# Usage: have fortune && fortune
have() {
	type "$1" &> /dev/null;
}

# Show top 10 used commands in history
top10() {
	history | awk '{a[$4]++ } END{for(i in a){print a[i] " " i}}'|sort -rn |head -n 10
}

# `tre` is a shorthand for `tree` with hidden files and color enabled, ignoring
# the `.git` directory, listing directories first. The output gets piped into
# `less` with options to preserve color and line numbers, unless the output is
# small enough for one screen.
tre() {
    tree -aC -I '.git|node_modules|bower_components' --dirsfirst "$@" | less -FRNX;
}

# extracts the given file
x() {
    if [ -f $1 ] ; then
      case $1 in
        *.tar.bz2)   tar xjf $1     ;;
        *.tar.gz)    tar xzf $1     ;;
        *.bz2)       bunzip2 $1     ;;
        *.rar)       unrar e $1     ;;
        *.gz)        gunzip $1      ;;
        *.tar)       tar xf $1      ;;
        *.tbz2)      tar xjf $1     ;;
        *.tgz)       tar xzf $1     ;;
        *.zip)       unzip $1       ;;
        *.Z)         uncompress $1  ;;
        *.7z)        7z x $1        ;;
        *)     echo "'$1' cannot be extracted via extract()" ;;
         esac
     else
         echo "'$1' is not a valid file"
     fi
}
